format = """
$os\
$directory\
$git_branch\
$git_status\
$lua\
$nodejs\
$golang\
$package\
$aws\
$docker_context\
$character\
"""

palette = 'nord'

[os]
style = "bold"
disabled = false

[os.symbols]
Ubuntu = "  "

[character]
success_symbol = '[➜](bold green)'
error_symbol = '[✗](bold red)'
vicmd_symbol = '[◀](bold yellow)'

[directory]
style = 'bold fg:dark_blue'
format = '[$path ]($style)'
truncation_length = 2
truncation_symbol = '…/'
truncate_to_repo = false

[directory.substitutions]
'~' = '[󰩃 Home]'
'Documents' = '[󱪚 Documents]'
'Downloads' = '[ Downloads]'
'Music' = '[󰝛 Music]'
'Pictures' = '[󰉔 Pictures]'
'Workspace' = '[  Workspace]'


[git_branch]
style = 'fg:green'
symbol = ' '
format = '[on](white) [$symbol$branch ]($style)'

[git_status]
style = 'fg:green'
format = '([$all_status$ahead_behind]($style) )'

[fill]
symbol = ' '

[lua]
symbol = ' '

[nodejs]
style = 'blue'
symbol = ' '
format = '[ $symbol ($version) ]($style)'


[golang]
style = 'blue'
symbol = '󰟓 '
format = '[ $symbol ($version) ]($style)'
detect_extensions = ["go"]
detect_files = ["go.mod", "go.sum", "glide.yaml", "Gopkg.yml", "Gopkg.lock", ".go-version"]


[package]
symbol = '󰏗 '
style = 'brown'
format = '[ $symbol $version ]($style)'
display_private = false

[aws]
symbol = ' '
style = 'yellow'
format = '[$symbol($profile )(\[$duration\] )]($style)'

[docker_context]
symbol = ' '
style = 'fg:#06969A'
format = '[$symbol]($style) $path'
detect_files = ['docker-compose.yml', 'docker-compose.yaml', 'Dockerfile']
detect_extensions = ['Dockerfile']

[palettes.nord]
dark_blue = '#5E81AC'
blue = '#81A1C1'
teal = '#88C0D0'
red = '#BF616A'
orange = '#D08770'
green = '#A3BE8C'
yellow = '#EBCB8B'
purple = '#B48EAD'
gray = '#434C5E'
black = '#2E3440'
white='#D8DEE9'

[custom.npm_version]
command = "npm --version 2>/dev/null || echo 'not installed'"
when = "command -v npm >/dev/null 2>&1"
symbol = "🔺"
style = "bold green"
format = "via [$symbol npm $output]($style) "

[custom.pnpm_version]
command = "pnpm --version 2>/dev/null || echo 'not installed'"
when = "command -v pnpm >/dev/null 2>&1"
symbol = "🟡"
style = "bold orange"
format = "via [$symbol pnpm $output]($style) "

[custom.yarn_version]
command = "yarn --version 2>/dev/null || echo 'not installed'"
when = "command -v yarn >/dev/null 2>&1"
symbol = "🔵"
style = "bold cyan"
format = "via [$symbol yarn $output]($style) "
